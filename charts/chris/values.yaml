# This file is for cutomizing how chris is deployed.

# Name
#####################

nameOverride: ""
fullnameOverride: ""


# Stuff you can typically ignore
#####################

imagePullSecrets: []

# Global settings
#####################

global:
  # storage class to use for persistent volume claims
  storageClass: ""

  # optional security context to apply to all pods
  # podSecurityContext:
  #   runAsUser: 123456
  #   runAsGroup: 789


# Not used
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


# ChRIS automatic admin account
#####################

chris_admin:
  username: khris
  email: noreply@babyMRI.org
  # If no password is set, then a random password is created for you.
  # password:

# ChRIS Backend
#####################
cube:
  image:
    repository: ghcr.io/fnndsc/cube
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  podAnnotations: {}

  # Use inter-pod affinity as a workaround for using a ReadWriteOnce PersistentVolumeClaim
  enablePodAffinityWorkaround: false

  # Configuration
  #####################
  config:
    # smaller values increases responsiveness at the cost of resource usage and possibly concurrency bugs
    CUBE_CELERY_POLL_INTERVAL: "5.0"
    # HTTP server security settings
    DJANGO_ALLOWED_HOSTS: "*"  # IMPORTANT! You must allow "{{ .Release.Name }}-heart:8000"
    DJANGO_CORS_ALLOW_ALL_ORIGINS: "true"
    DJANGO_CORS_ALLOWED_ORIGINS: ""
    DJANGO_SECURE_PROXY_SSL_HEADER: ""
    DJANGO_USE_X_FORWARDED_HOST: "false"
    # enable LDAP login
    AUTH_LDAP: "false"
    # AUTH_LDAP_SERVER_URI: "ldap://192.168.0.29:389"
    # AUTH_LDAP_BIND_DN: "cn=admin,dc=fnndsc,dc=org"
    # AUTH_LDAP_USER_SEARCH_ROOT: "dc=fnndsc,dc=org"

  ## Additional secret environment variables for CUBE
  # secrets:
  #   AUTH_LDAP_BIND_PASSWORD: "admin1234"

  # Set of default plugins to register with the coupled pfcon (if .pfcon.enabled)
  # Plugins which CUBE is hard-coded to depend on should be listed here.
  # To add plugins for general use, see https://chrisproject.org/docs/tutorials/upload_plugin
  plugins:
    - https://cube.chrisproject.org/api/v1/plugins/170/ # pl-dircopy
    - https://cube.chrisproject.org/api/v1/plugins/81/  # pl-tsdircopy
    - https://cube.chrisproject.org/api/v1/plugins/10/  # pl-topologicalcopy

  # Ingress
  #####################
  ingress: {}
    ## Use nodePort for ingress
    # nodePort: "32000"
    ## optionally, test the nodePort connectivity by providing the hostname to any node of your cluster
    # nodePortHost: my_hostname

  # Resources
  #####################
  # Persistent volume for CUBE files
  storage:
    # In the default configuration, the volume is managed by pfcon's subchart, so leave this as "enabled: false"
    enabled: false
    size: 100Gi
    accessModes: [ "ReadWriteOnce" ]
    # storageClass: ""

  # Resources
  #####################
  workerMains:
    ## Resources for the main worker.
    ## It requires a large memory allocation due to an inefficient implementation.
    ## Recommended value is x4 the size of the largest anticipated plugin instance output directory.
    resources:
      requests:
        memory: 20Gi
        cpu: 2
      limits:
        memory: 21Gi
        cpu: 2

  workerPeriodic:
    ## Resources for the periodic worker.
    ## Default values should be okay. Memory request may be further reduced to ~400Mi.
    resources:
      requests:
        memory: 1Gi
        cpu: 250m
      limits:
        memory: 1.1Gi
        cpu: 250m

  server:
    workers: 4
    ## resources for the HTTP server (WSGI).
    ## Default values should be okay. About 256Mi of memory is needed per idle worker.
    resources:
      requests:
        memory: 2Gi
        cpu: 1
      limits:
        memory: 2Gi
        cpu: 1

# Database
#####################

# [SUBCHART] PostgreSQL packaged by Bitnami
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql#parameters
postgresql:

  # no reason to change these values
  auth:
    database: "chris"
    username: "chris"

  # one of: [standalone, replication]
  # Replication is supported, see upstream README.md for configuration.
  architecture: standalone

  primary:
    # Primary database instance resource requests
    resources:
      requests:
        memory: 1Gi
        cpu: 1

    # Defer control of security configurations to OpenShift
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
  volumePermissions:
    enabled: false
  shmVolume:
    enabled: false

# [SUBCHART] RabbitMQ packaged by Bitnami
# https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq#parameters
rabbitmq:

  # No reason to change these values.
  #
  # Whether or not to set a password for RabbitMQ depends on your threat model.
  # The RabbitMQ service does not receive ingress traffic, the password appears
  # here in values.yaml due to limitations of how Helm charts share variables
  # with subcharts.
  auth:
    username: "chris"
    password: "chris1234"

  persistence:
    size: 1Gi

  # Defer control of security configurations to OpenShift
  podSecurityContext:
    enabled: false
  containerSecurityContext:
    enabled: false
  volumePermissions:
    enabled: false

pfcon:
  enabled: true

  name: "innetwork"
  description: "Kubernetes cluster compute resource"
  replicaCount: 1
  podAnnotations: {}

  service:
    type: ClusterIP
    port: 5005

  # Storage space for CUBE files should be configured here.
  # It is recommended to allocate as much space as possible for CUBE files.
  storage:
    existingClaim: ""
    size: 100Gi
    accessModes: [ "ReadWriteOnce" ]
    # storageClass:

  pfcon:
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 384Mi

    workers: 4
    workerTimeout: 3600

    # pfcon configuration
    # Recommended to keep as-is
    config:
      innetwork: true
      storageEnv: filesystem

  pman:
    # It is unnecessary to increase pman's resources to above the minimum because
    # pman doesn't do anything besides sending and receiving HTTP requests.
    resources:
      limits:
        cpu: 200m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi

    workers: 4
    workerTimeout: 30

    # pman configuration
    # https://github.com/fnndsc/pman#environment-variables
    # SECRET_KEY, CONTAINER_ENV, STORAGE_TYPE, VOLUME_NAME, and CONTAINER_USER are handled automaticallY
    config:
      JOB_LABELS: chrisproject.org/job=plugininstance
      ENABLE_HOME_WORKAROUND: "yes"
      REMOVE_JOBS: "yes"
      IGNORE_LIMITS: "no"
