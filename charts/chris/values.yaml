# This file is for cutomizing how chris-cube is deployed.

# Name
#####################

nameOverride: ""
fullnameOverride: ""


# Stuff you can typically ignore
#####################

imagePullSecrets: []

# Global settings
#####################

global:
  # storage class to use for persistent volume claims
  storageClassName: ""

  # optional security context to apply to all containers
  # securityContext:
  #   runAsUser: 123456
  #   runAsGroup: 789



serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


# ChRIS Backend
#####################
cube:
  image:
    repository: ghcr.io/fnndsc/cube
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "5.0.0"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000


  # Configuration
  #####################
  config:
    # smaller values increases responsiveness at the cost of resource usage and possibly concurrency bugs
    CUBE_CELERY_POLL_INTERVAL: "5.0"
    # HTTP server security settings
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_CORS_ALLOW_ALL_ORIGINS: "true"
    DJANGO_CORS_ALLOWED_ORIGINS: ""
    DJANGO_SECURE_PROXY_SSL_HEADER: ""
    DJANGO_USE_X_FORWARDED_HOST: "false"
    # enable LDAP login
    AUTH_LDAP: "false"
    # AUTH_LDAP_SERVER_URI: "ldap://192.168.0.29:389"
    # AUTH_LDAP_BIND_DN: "cn=admin,dc=fnndsc,dc=org"
    # AUTH_LDAP_USER_SEARCH_ROOT: "dc=fnndsc,dc=org"

  ## Additional secret environment variables for CUBE
  # secrets:
  #   AUTH_LDAP_BIND_PASSWORD: "admin1234"

  # Ingress
  #####################
  ingress:
    ## Use nodePort for ingress
    nodePort: "32000"
    ## optionally, test the nodePort connectivity by providing the hostname to any node of your cluster
    nodePortHost: my_hostname

  # Resources
  #####################
  resources:
    files:
      accessModes:
      - ReadWriteOnce
      ## storage class to use for ChRIS files storage
      resources:
        requests:
          ## how much storage for ChRIS files
          storage: 100Gi

    workerMains:
      resources:
        ## Resources for the main worker.
        ## It requires a large memory allocation because an inefficient function
        ## buffers all the input files of a job are buffered into memory.
        requests:
          memory: 40Gi
          cpu: 4
        limits:
          memory: 41Gi
          cpu: 4

    server:
      ## resources for the HTTP server (WSGI)
      resources:
        requests:
          memory: 512Mi
          cpu: 1
        limits:
          memory: 1Gi  # TODO test whether this is enough
          cpu: 1

    db:
      volume:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            ## how much storage for the database
            storage: 10Gi

      ## resources for the database
      resources:
        requests:
          memory: 8Gi
          cpu: 4
        limits:
          memory: 9Gi
          cpu: 4

