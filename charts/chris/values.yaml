# This file is for cutomizing how chris is deployed.

nameOverride: ""
fullnameOverride: ""

imagePullSecrets: []

global:
  # -- Global default StorageClass for Persistent Volume(s)
  defaultStorageClass: ""

  # -- Optional security context to apply to all pods
  # podSecurityContext:
  #   runAsUser: 123456
  #   runAsGroup: 789

  # -- Bitnami subchart OpenShift compatibility settings
  # compatibility:
  #   openshift:
  #     # optional, adapt security context of Bitnami subcharts for OpenShift compatibility
  #     adaptSecurityContext: auto

  # -- Image pull secrets.
  # -- Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
    # - name: my-dockerhub-login


# -- Ingress
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- OpenShift route
route:
  enabled: false
  host: chart-example.local
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
    destinationCACertificate: ''

# -- ChRIS backend (CUBE) configuration.
cube:
  image:
    repository: ghcr.io/fnndsc/cube
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  # -- Use inter-pod affinity as a workaround for using a ReadWriteOnce PersistentVolumeClaim
  enablePodAffinityWorkaround: false

  # -- Prefix to use for job names submitted to Kubernetes. Must be a unique when the
  # -- Kubernetes namespace is used for more than one instance of CUBE.
  # -- The default behavior is to use the release name as the job prefix.
  jobPrefix:

  # -- CUBE configuration. N.B.: values must be strings.
  config:
    # -- Event polling frequency. Smaller value increases responsiveness at the cost of increased resource
    # -- usage and possible concurrency bugs.
    CUBE_CELERY_POLL_INTERVAL: "5.0"
    # -- Allowed hosts. Note: "*" is okay and convenient when OpenShift router or
    # -- k8s ingress is validating the HTTP Host header.
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_CORS_ALLOW_ALL_ORIGINS: "true"
    DJANGO_CORS_ALLOWED_ORIGINS: ""
    DJANGO_SECURE_PROXY_SSL_HEADER: ""
    DJANGO_USE_X_FORWARDED_HOST: "false"

    ## Granian ASGI web server performance tuning
    ## ref: https://github.com/emmett-framework/granian/blob/master/README.md#options
    # -- Granian web server number of workers
    GRANIAN_WORKERS: "1"
    # -- Granian web server number of threads (per worker)
    GRANIAN_THREADS: "1"
    # -- Granian web server number of blocking threads (per worker)
    GRANIAN_BLOCKING_THREADS: "1"

    ## LDAP configuration
    # -- Enable LDAP authentication
    AUTH_LDAP: "false"
    # AUTH_LDAP_SERVER_URI: "ldap://192.168.0.29:389"
    # AUTH_LDAP_BIND_DN: "cn=admin,dc=fnndsc,dc=org"
    # AUTH_LDAP_USER_SEARCH_ROOT: "dc=fnndsc,dc=org"
    # AUTH_LDAP_GROUP_SEARCH_ROOT:
    # AUTH_LDAP_CHRIS_ADMIN_GROUP:

    # -- Disable user account creation via API.
    # -- If `true`, user accounts can only be created manually or
    # -- via SSO (LDAP, ...)
    # -- A value of `false` would allow anyone to create an account.
    DISABLE_USER_ACCOUNT_CREATION: "true"

    # -- Use a database connection pool.
    # -- This setting _might_ improve performance, but is problematic: one connection
    # -- pool is used per celery worker, which can max out the number of connections
    # -- allowed by Postgres (default 100). Furthermore, there might be a bug in CUBE
    # -- where disconnections are not reconnected.
    DATABASE_CONN_POOL: "false"

    # DATABASE_CONN_POOL_MIN_SIZE: 4
    # DATABASE_CONN_POOL_MAX_SIZE: 8
    # DATABASE_CONN_POOL_TIMEOUT: 10

  # -- Additional secret environment variables for CUBE.
  # -- Note: if `SECRET_KEY` is unset, its previous value will be looked up,
  # -- or a random value will be generated for you.
  secrets:
    # -- password of the superuser+admin "chris" user account.
    # -- If unset, the previously set value will be used, or a random value will be generated.
    CHRIS_SUPERUSER_PASSWORD: ""
    # AUTH_LDAP_BIND_PASSWORD: "admin1234"
    # SECRET_KEY: supersecretkey  # https://docs.djangoproject.com/en/5.1/ref/settings/#secret-key

  # -- Set of default plugins to register with the coupled pfcon (if .pfcon.enabled)
  # -- Plugins which CUBE is hard-coded to depend on should be listed here.
  # -- To add plugins for general use, see https://chrisproject.org/docs/tutorials/upload_plugin
  plugins:
    - https://cube.chrisproject.org/api/v1/plugins/1/   # pl-dircopy
    - https://cube.chrisproject.org/api/v1/plugins/2/   # pl-tsdircopy
    - https://cube.chrisproject.org/api/v1/plugins/3/   # pl-topologicalcopy

  # -- CUBE files storage
  storage:
    # -- Enable persistent storage.
    # -- The default configuration (which is recommended for most cases)
    # -- is to share one PersistentVolumeClaim between pfcon and CUBE.
    # -- Leave `enabled=false` unless you know what you're doing.
    enabled: false
    size: 8Gi
    accessModes: [ "ReadWriteOnce" ]
    storageClass: ""

  # -- Main celery worker configuration.
  workerMains:
    # -- Command to run for the main worker.
    command: ["celery", "-A", "core", "worker", "-c", "4", "-l", "info", "-Q", "main1,main2"]
    # -- Resources for the main worker.
    # -- If an out-of-network pfcon is configured, recommended memory limit is twice
    # -- the largest anticipated plugin instance output directory's total size.
    # -- This is because of inefficient implementation, see https://github.com/FNNDSC/ChRIS_ultron_backEnd/issues/377
    resources:
      requests:
        memory: 2Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 500m

  # -- Periodic celery worker configuration.
  workerPeriodic:
    # -- Command to run for the periodic worker.
    command: ['celery', '-A', 'core', 'worker', '-c', '2', '-l', 'info', '-Q', 'periodic']
    # -- Resources for the periodic worker. Defaults are good enough.
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 250m

  # -- CUBE ASGI server configuration.
  server:
    # -- CUBE server pod annotations.
    podAnnotations: {}
    # -- Deployment replicas count.
    replicas: 1
    # -- Service configuration.
    service:
      type: ClusterIP
      port: 8000
      # -- CUBE server service nodePort
      nodePort:
      # -- Hostname of node from which the NodePort will be accessed.
      # -- (nodePortHost doesn't have an effect, it's only useful for NOTES.txt)
      nodePortHost:

    # -- CUBE server command.
    command: ["granian", "--host", "0.0.0.0", "--interface", "asginl", "config.asgi:application"]
    # -- Resources for the HTTP server (ASGI).
    resources:
      requests:
        memory: 2Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 500m

    # -- CUBE server container hostPort.
    hostPort:

    # -- CUBE server container livenessProbe.
    livenessProbe:
      # -- Enable the livenessProbe.
      enabled: true
      httpGet:
        path: /api/v1/users/
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 5

# -- Specify a secret containing connection parameters for the PostgreSQL database.
# -- Ignore if `postgres.enabled=true`.
postgresSecret:
  # -- Name of existing secret for the postgres connection parameters.
  # -- Required if `postgres.enabled=false`.
  name:
  # -- Indicate whether the database is a Crunchy Postgres for Kubernetes PostgresCluster.
  isCrunchy: false
  # -- Names of items in the secret.
  # -- If `postgresql.enabled=true` or `postgresSecret.isCrunchy=true` then well-known values
  # -- will be used for `postgresSecret.keys.*` and there is no need to customize this section.
  keys:
    # -- Name of the key for the postgres host value.
    host:
    # -- Name of the key for the postgres port value.
    port:
    # -- Name of the key for the postgres database value.
    database:
    # -- Name of the key for the postgres username value.
    username:
    # -- Name of the key for the postgres password value.
    password:
    # -- Name of the key for the postgres uri value.
    uri:

# -- [SUBCHART] PostgreSQL packaged by Bitnami
# -- https://github.com/bitnami/charts/tree/main/bitnami/postgresql#parameters
postgresql:
  # -- Enable the postgresql subchart. Set `enable=true` to keep life simple,
  # -- or `enable=false` if using your own existing postgres.
  enabled: true

  auth:
    database: "chris"
    username: "chris"

  # -- one of: [standalone, replication]
  architecture: standalone

  primary:
    # -- Set container resources according to one common preset (allowed values:
    # -- none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored
    # -- if primary.resources is set (primary.resources is recommended for production).
    # -- see https://github.com/bitnami/charts/blob/973a2792e0bc5967e3180c6d44eebf223b9f1d83/bitnami/common/templates/_resources.tpl#L15-L43
    resourcesPreset: small
    # -- Set container requests and limits for different resources like CPU or memory
    # -- (essential for production workloads)
    resources: {}
    persistence:
      enabled: true
      size: 1Gi

  # Defer control of security configurations to OpenShift
  volumePermissions:
    enabled: false
  shmVolume:
    enabled: false

  # -- Create secret for service binding (Experimental)
  # -- Ref: https://servicebinding.io/service-provider/
  serviceBindings:
    enabled: true  # required

  # -- Add labels to all the deployed resources
  commonLabels:
    app.kubernetes.io/part-of: chris

# -- [SUBCHART] RabbitMQ packaged by Bitnami
# -- https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq#parameters
rabbitmq:
  persistence:
    # -- Enable RabbitMQ data persistence using PVC
    enabled: true
    # -- PVC Storage Request for RabbitMQ data volume
    size: 1Gi

  # -- Create secret for service binding (Experimental)
  # -- Ref: https://servicebinding.io/service-provider/
  serviceBindings:
    enabled: true  # required

  # -- Set container resources according to one common preset
  # -- (allowed values: none, nano, micro, small, medium, large,
  # -- xlarge, 2xlarge). This is ignored if resources is set
  # -- (resources is recommended for production).
  resourcesPreset: small

  # -- Set container requests and limits for different resources
  # -- like CPU or memory (essential for production workloads)
  resources: {}

  # -- Labels to add to all deployed objects
  commonLabels:
    app.kubernetes.io/part-of: chris

# -- Configuration of NATS, a messaging system. In ChRIS, NATS is used for PACS retrieve
# -- progress messages sent from oxidicom to CUBE.
# -- Documentation: https://github.com/bitnami/charts/tree/nats/8.4.3/bitnami/nats
nats:
  # -- Set container resources according to one common preset (allowed values: none,
  # -- nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if
  # -- resources is set (resources is recommended for production).
  resourcesPreset: small
  # -- Add labels to all the deployed resources
  commonLabels:
    app.kubernetes.io/part-of: chris
  auth:
    # -- CUBE does not support NATS authorization
    enabled: false

# -- Configuration of pfcon, the ChRIS compute controller
pfcon:
  enabled: true

  name: "innetwork"
  description: "Kubernetes cluster compute resource"
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext: {}

  service:
    type: ClusterIP
    port: 5005

  nodeSelector: {}

  # -- Storage space for CUBE files should be configured here.
  # -- It is recommended to allocate as much space as possible for CUBE files.
  storage:
    existingClaim: ""
    size: 8Gi
    accessModes: [ "ReadWriteOnce" ]
    storageClass:

  pfcon:
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

    # -- pfcon configuration
    # -- Recommended to keep as-is
    config:
      innetwork: true
      storageEnv: fslink

    # -- Extra environment variables.
    extraEnv:
      GUNICORN_CMD_ARGS: "--workers=4 --timeout=3600"

  pman:
    # -- It is unnecessary to increase pman's resources to above the minimum because
    # -- pman doesn't do anything besides sending and receiving HTTP requests.
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

    # -- pman configuration
    # -- https://github.com/FNNDSC/pman#environment-variables
    # -- N.B.: SECRET_KEY, CONTAINER_ENV, STORAGE_TYPE, VOLUME_NAME, and CONTAINER_USER
    # -- are handled automatically, and should not be manually set.
    extraEnv:
      JOB_LABELS: chrisproject.org/job=plugininstance
      ENABLE_HOME_WORKAROUND: "yes"
      REMOVE_JOBS: "yes"
      IGNORE_LIMITS: "no"
      GUNICORN_CMD_ARGS: "--workers=4 --timeout=30"

    # -- Set securityContext of containers created by pman to have the same securityContext as .global.podSecurityContext
    # -- or the default fnndsc/cube container user, so that the container user can write to the shared volume's filesystem.
    # -- Default behavior is to detect whether on OpenShift: if so, set as false, true otherwise.
    setSecurityContext:

# -- Configuration of PFDCM, the ChRIS PACS bridge
pfdcm:
  # -- Enable PFDCM, the ChRIS PACS bridge
  enabled: false

  # -- String to partially override the names template
  nameOverride: ""
  # -- String to fully override the names template
  fullnameOverride: ""

  # -- Image for PFDCM
  image:
    repository: ghcr.io/fnndsc/pfdcm
    pullPolicy: IfNotPresent
    tag: "3.1.22"

  imagePullSecrets: []

  # -- DICOM application entity title
  aet: "ChRIS"

  # -- Additional PFDCM configuration. Usually, you don't need to change this.
  additionalConfig:
    # -- Deprecated configuration of ChRIS backends.
    cube: {}
      # local:
      #   url: https://cube.example.org/api/v1/
      #   username: pfdcm
      #   password: pfdcm1234
    # -- Deprecated configuration of storage.
    storage: {}
      # local:
      #   storagetype: fs
      #   storepath: /files
    # -- Configuration of PACS.
    pacs:
      # -- Configuration of PACS services PFDCM can talk with.
      # -- If the Orthanc subchart below is enabled, the correct values for
      # -- it will be automatically filled in. If PFDCM need to speak with
      # -- other PACS outside of this chart, add them here.
      services: {}
        # orthanc:
        #   info:
        #     aet: CHRISLOCAL
        #     aet_listener: ORTHANC
        #     aec: ORTHANC
        #     serverIP: orthanc
        #     serverPort: 4242

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

  # -- Extra environment variables for the PFDCM container.
  # -- Note: PORT is configured automatically, it is not recommended to set it manually.
  extraEnv:
    # -- Maximum number of web server workers. Strongly encouraged to increase this value.
    MAX_WORKERS: 2

  # -- Resources configuration for pfdcm. Strongly encouraged to increase these values.
  resources:
    limits:
      cpu: 250m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

  hostPort:
  
  readinessProbe: {}

  livenessProbe: {}
    # httpGet:
    #   path: /api/v1/about/
    #   port: http
    # initialDelaySeconds: 10
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 3

  startupProbe: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # -- Labels for the Deployment/Service resource.
  labels: {}

  # -- Annotations for the Deployment/Service resource.
  annotations: {}

  # Kind configuration
  #####################
  # -- kind must be one of:
  # --
  # -- - "Deployment": use (standard) Kubernetes Deployment and Service APIs
  # -- - "Service": use the KNative Serving API
  kind: Deployment

  # KNative Serving configuration
  #####################
  # -- KNative Serving revision annotations.
  # -- Only used with `pfdcm.kind=Service`
  revisionAnnotations: {}
    # autoscaling.knative.dev/target: "100"
    # autoscaling.knative.dev/min-scale: "1"
    # autoscaling.knative.dev/max-scale: "3"
    # autoscaling.knative.dev/scale-to-zero-pod-retention-period: "1m5s"

  # Deployment configuration
  #####################

  # -- This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  # -- Ignored if `autoscaling.enabled=true`
  # -- Only used with `pfdcm.kind=Deployment`
  replicaCount: 1

  # -- This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  # -- Only used with `pfdcm.kind=Deployment`
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 4005
    # nodePort:
    annotations:
      kubernetes.io/description: PFDCM API. Swagger docs available on /docs

  # -- This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  # -- Only used with `pfdcm.kind=Deployment`
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- OpenShift route.
  # -- Only used with `pfdcm.kind=Deployment`
  route:
    enabled: false
    host: chart-example.local
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
      destinationCACertificate: ''

  # -- Helm test configuration
  test:
    # -- Path to test for connectivity
    path: '/api/v1/hello/'

  # -- This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  # -- Only used with `pfdcm.kind=Deployment`
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- DICOM listener for pfdcm. Enabled when pfdcm is enabled.
  listener:
    image:
      repository: ghcr.io/fnndsc/oxidicom
      pullPolicy: Always
      tag: "3.0.0"
    podAnnotations: {}
    # -- (optional) hostPort for DICOM listener
    hostPort:
    # -- The PACS server must be configured to push to this service.
    # -- If using Orthanc, the Helm chart will help you validate your
    # -- configuration of Orthanc's modailities to include this service.
    service:
      enabled: true
      type: ClusterIP
      port: 11111
      # nodePort: 30033
    replicas: 1
    ## manual configuration of OpenTelemetry
    # env:
    #   - name: OTEL_RESOURCE_ATTRIBUTES
    #     value: service.name=oxidicom
    #   - name: OTEL_EXPORTER_OTLP_ENDPOINT
    #     value: http://tempo:4317

    # -- Optional configurations of oxidicom.
    config:
      # -- number of DICOM listener threads
      # -- ref: https://chrisproject.org/docs/oxidicom/deployment#performance-tuning
      listenerThreads: 8

      # -- number of Tokio runtime threads
      # -- ref: https://chrisproject.org/docs/oxidicom/deployment#performance-tuning
      tokioThreads: 4

      # -- enable/disable logging and set verbosity of components
      logging: oxidicom=warn

      ## strictPduLength, uncompressedOnly, and maxPduLength are strange DICOM
      ## options which you probably want to leave as their default values.
      # strictPduLength: true
      # uncompressedOnly: true
      # maxPduLength: 16384
      ## Whether to accept unknown DICOM transfer syntaxes.
      # promiscuous: true

    resources:
      # It's written in Rust!
      # Memory usage typically stays under 20MiB, unless there is backpressure
      # from slow disk write speed
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 256Mi

# -- Orthanc open-source PACS server subchart.
# -- Ref: `helm show values fnndsc/orthanc --version 2.0.0`
orthanc:
  # -- Enable Orthanc. If true, it is recommended to also set pfdcm.enabled=true.
  enabled: false

  # -- This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1

  # -- This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    # -- Image repository.
    # -- Note: jodogne/orthanc-plugins is preferred over orthancteam/orthanc
    # --       because the compressed image size is smaller (80MB v.s. 1.1GB)
    repository: docker.io/jodogne/orthanc-plugins
    # -- This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # -- Overrides the image tag whose default is the chart appVersion.
    tag: ""

  # -- PersistentVolumeClaim storage configuration
  persistence:
    index:
      # -- Enable Orthanc SQLite index data persistence using PVC
      enabled: false
      # -- Name of an existing PVC to use
      existingClaim:
      # -- PVC Storage Class for Orthanc SQLite index
      storageClass:
      # -- PVC Access Mode for Orthanc SQLite index
      accessModes: [ ReadWriteOncePod ]
      # -- PVC Storage Request for Orthanc SQLite index
      size: 1Gi
      # -- Annotations for the PVC
      annotations: {}
      # -- Labels for the PVC
      labels: {}
    storage:
      # -- Enable Orthanc storage data persistence using PVC
      enabled: false
      # -- Name of an existing PVC to use
      existingClaim:
      # -- PVC Storage Class for Orthanc storage
      storageClass:
      # -- PVC Access Mode for Orthanc storage
      accessModes: [ ReadWriteOnce ]
      # -- PVC Storage Request for Orthanc storage
      size: 1Gi
      # -- Annotations for the PVC
      annotations: {}
      # -- Labels for the PVC
      labels: {}

  # -- Orthanc configuration
  # -- Ref: https://orthanc.uclouvain.be/book/users/configuration.html
  # -- Do not put secrets in here. Use the environment variable configuration
  # -- syntax and declare values for extraEnv or extraEnvFrom.
  config:
    # -- The logical name of this instance of Orthanc. This one is
    # -- displayed in Orthanc Explorer and at the URI "/system".
    Name: ChRIS Orthanc

    # Network Topology
    # ----------------
    # -- The list of the known DICOM modalities. This option is ignored if
    # -- "DicomModalitiesInDatabase" is set to "true", in which case you
    # -- must use the REST API to define modalities.
    # -- IMPORTANT: if orthanc.enabled=true and pfdcm.enabled=true, you must
    # --            configure Orthanc to be able to push to the oxidicom
    # --            service of ChRIS.
    DicomModalities: {}
      # "ChRIS": [ "ChRIS", "NAME-oxidicom", 11111 ]

