apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-test-cube-works"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: "{{ include "chris.name" . }}-test-cube-works"
    app.kubernetes.io/instance: "{{ .Release.Name }}-test-cube-works"
  annotations:
    "helm.sh/hook": test
    "kubernetes.io/description": "Test the ChRIS backend by creating a test user, logging in, and uploading a file."

spec:
  restartPolicy: Never
  containers:
    - name: create-user-test
      image: ghcr.io/fnndsc/aiochris:0.4.0
      command:
        - python
        - -c
        - |
          import time
          import random
          import asyncio
          from pathlib import Path
          from aiochris import ChrisClient

          url = 'http://{{ .Release.Name }}-heart:8000/api/v1/'
          username = f'helmtest-{int(time.time())}'
          password = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits, k=12))
          email = f'{username}@example.org'
          data = b'Some random data appears on the next line.\n{{ randAlphaNum 64 }}\n'

          async def main():
              await ChrisClient.create_user(url, username, password, email)
              chris = await ChrisClient.from_login(url, username, password)

              file = Path('/tmp/testdata.txt')
              file.write_bytes(data)
              uploaded_file = await chris.upload_file(file, 'testdata.txt')
              print(uploaded_file.url)

              await chris.close()

          asyncio.run(main())
