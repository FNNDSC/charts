apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-test-cube-works"
  namespace: {{ .Release.Namespace }}
  labels:
    helm.sh/chart: {{ include "chris.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": test
    "kubernetes.io/description": "Test the ChRIS backend by creating a test user, logging in, and uploading a file."

spec:
  restartPolicy: Never
  containers:
    - name: create-user-test
      image: ghcr.io/fnndsc/aiochris:0.10.0
      command:
        - python
        - -c
        - |
          import time, random, string, sys, logging
          import asyncio
          from pathlib import Path
          from aiochris import ChrisClient, Status

          logging.basicConfig(level=logging.INFO)

          url = 'http://{{ .Release.Name }}-heart:8000/api/v1/'
          username = f'helmtest-{int(time.time())}'
          password = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits, k=12))
          email = f'{username}@example.org'
          data = b'Some random data appears on the next line.\n{{ randAlphaNum 64 }}\n'

          async def main():
              created_user = await ChrisClient.create_user(url, username, password, email)
              logging.info(f'created user {created_user}')
              chris = await ChrisClient.from_login(url, username, password)

              file = Path('/tmp/data.txt')
              file.write_bytes(data)
              # TODO FIX ME
              uploaded_file = await chris.upload_file(file, 'helm-test/data.txt')
              logging.info(f'uploaded file {uploaded_file.url}')

              {{- if .Values.pfcon.enabled }}
              plugin = await chris.search_plugins(name_exact='pl-dircopy').get_only(allow_multiple=True)
              logging.info(f'found plugin {plugin.name} id={plugin.id}')

              plinst = await plugin.create_instance(dir=f'{username}/uploads/helm-test', cpu_limit='100m', memory_limit='512Mi')
              logging.info(f'submitted plugin instance {plinst.id}')
              feed = await plinst.get_feed()
              logging.info(f'created feed {feed.url}')
              feed = await feed.set(name='Test from Helm')
              logging.info(f'Feed name was set to {feed.name}')

              elapsed, finished = await plinst.wait()
              logging.info(f'Finished after {elapsed:.2f}s, status={finished.status}')

              await chris.close()
              return finished.status
              {{- else }}
              await chris.close()
              return Status.finishedSuccessfully
              {{- end }}

          if __name__ == '__main__':
              status = asyncio.run(main())
              if status != Status.finishedSuccessfully:
                  sys.exit(1)

      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 100m
