apiVersion: apps/v1

kind: Deployment
metadata:
  name: {{ include "chris.fullname" . }}-heart
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "chris.name" . }}-heart
    app.kubernetes.io/instance: {{ .Release.Name }}-heart
    {{- include "cube.labels" . | nindent 4 }}
  annotations:
    kubernetes.io/description: "Celery beat and private server"
spec:
  # IMPORTANT: celery beat and private server should not be replicated!
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "chris.name" . }}-heart
      app.kubernetes.io/instance: {{ .Release.Name }}-heart
  template:
    metadata:
      name: {{ .Release.Name }}-heart
      namespace: {{ .Release.Namespace }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "chris.name" . }}-heart
        app.kubernetes.io/instance: {{ .Release.Name }}-heart
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-db
          # N.B. hard-coded image is not necessarily same as the one used by the subchart, but should be OK
          image: docker.io/bitnami/postgresql:16.0.0-debian-11-r3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - until pg_isready -U postgres -h {{ .Release.Name }}-postgresql -p 5432; do sleep 1; done
        - name: migratedb
          command: ["python", "manage.py", "migrate", "--noinput"]
          {{- include "cube.container" . | nindent 10 }}
        - name: create-superuser
          command:
          - python
          - manage.py
          - shell
          - -c
          - |
            import os
            from django.contrib.auth.models import User

            user_config = {
                'username': os.environ['CHRIS_SUPERUSER_USERNAME'],
                'password': os.environ['CHRIS_SUPERUSER_PASSWORD'],
                'email': os.environ['CHRIS_SUPERUSER_EMAIL']
            }

            if (existing_user := User.objects.filter(username=user_config['username']).first()) is not None:
                existing_user.set_password(user_config['password'])
                existing_user.save()
                print(f'Updated password for user "{existing_user.username}"')
            else:
                created_user = User.objects.create_superuser(**user_config)
                print(f'Created superuser "{created_user.username}"')
          {{- include "cube.container" . | nindent 10 }}
            - name: CHRIS_SUPERUSER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-chris-superuser
                  key: username
            - name: CHRIS_SUPERUSER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-chris-superuser
                  key: password
            - name: CHRIS_SUPERUSER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-chris-superuser
                  key: email

        # N.B. in theory we should check for rabbitmq too but doesn't actually matter since rabbitmq is fast

      containers:
        - name: celery-beat
          command: ["celery", "-A", "core", "beat", "-l", "info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
          {{- include "cube.container" . | nindent 10 }}
          # hard-coded resources because celery beat shouldn't require variable resources
          resources:
            requests:
              memory: 384Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 100m
        - name: server-private
          command: ["gunicorn", "-b", "0.0.0.0:8000", "-w", "1", "config.wsgi:application"]
          {{- include "cube.container" . | nindent 10 }}
          ports:
            - name: http
              containerPort: 8000
          resources:
            requests:
              memory: 384Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 100m
          livenessProbe:
            httpGet:
              path: /api/v1/users/
              port: http
            initialDelaySeconds: 3
            periodSeconds: 3

      {{- include "cube.pod" . | nindent 6 }}

---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-heart
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "chris.name" . }}-heart
    app.kubernetes.io/instance: {{ .Release.Name }}-heart
    {{- include "cube.labels" . | nindent 4 }}
  annotations:
    kubernetes.io/description: "Private ChRIS API endpoint for internal use"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: {{ include "chris.name" . }}-heart
    app.kubernetes.io/instance: {{ .Release.Name }}-heart
  ports:
    - name: http
      protocol: TCP
      port: 8000
      targetPort: 8000
