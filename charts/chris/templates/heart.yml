apiVersion: apps/v1

kind: Deployment
metadata:
  name: {{ include "chris.heart.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "chris.heart.matcher" . | nindent 4 }}
    {{- include "cube.labels" . | nindent 4 }}
  annotations:
    kubernetes.io/description: "Celery beat and startup coordination server"
spec:
  replicas: 1 {{- /* important: celery beat should not be replicated! */}}
  selector:
    matchLabels:
      {{- include "chris.heart.matcher" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "chris.heart.matcher" . | nindent 8 }}
        {{- include "cube.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-db
          {{- /* N.B. hard-coded image is not necessarily same as the one used by the subchart, but should be OK */}}
          image: docker.io/bitnami/postgresql:16.4.0-debian-12-r12
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - until pg_isready -U "$USERNAME" -h $HOST -p $PORT; do sleep 1; done
          env:
            - name: USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "cube.db.secret" . }}
                  key: {{ include "chris.db.secretItemKey" (dict "Values" .Values "name" "username" "crunchyName" "user") }}
            - name: HOST
              valueFrom:
                secretKeyRef:
                  name: {{ include "cube.db.secret" . }}
                  key: {{ include "chris.db.secretItemKey" (dict "Values" .Values "name" "host" "crunchyName" "host") }}
            - name: PORT
              valueFrom:
                secretKeyRef:
                  name: {{ include "cube.db.secret" . }}
                  key: {{ include "chris.db.secretItemKey" (dict "Values" .Values "name" "port" "crunchyName" "port") }}
        - name: migratedb
          command: ["python", "manage.py", "migrate", "--noinput"]
          {{- include "cube.container" . | nindent 10 }}
        {{- if .Values.pfcon.enabled }}
        - name: create-incluster-cr
          command:
            - sh
            - -ec
            - |
              {{- /*
              - FQDN required, see https://github.com/FNNDSC/ChRIS_ultron_backEnd/issues/505
              - Name of pfcon service is brittle. I don't fully understand how subchart subtemplates are
                accessed by the parent chart. The URL is probably wrong if .Values.pfcon.nameOverride
                or .Values.pfcon.fullnameOverride is set.
              - `manager.py add` does nothing if the cr already exists
              - `manager.py modify` is called after `manager.py add` in case values are changed
              */}}
              url="http://{{ .Release.Name }}-pfcon.{{ .Release.Namespace }}.svc:{{ .Values.pfcon.service.port }}/api/v1/"
              name="{{ .Values.pfcon.name }}"
              python plugins/services/manager.py add "$name" "$url" --user "$PFCON_USER" --password "$PFCON_PASSWORD" --description {{ .Values.pfcon.description | quote }} {{ if .Values.pfcon.pfcon.config.innetwork }}--innetwork{{ end }}
              python plugins/services/manager.py modify "$name" --name "$name" --url "$url" --auth_url "${url}auth-token/" --user "$PFCON_USER" --password "$PFCON_PASSWORD" --description {{ .Values.pfcon.description | quote }} {{ if .Values.pfcon.pfcon.config.innetwork }}--innetwork{{ end }}
              plugins=({{ join " " .Values.cube.plugins }})
              for plugin_url in "${plugins[@]}"; do
                python plugins/services/manager.py register "$name" --pluginurl "$plugin_url"
              done
          {{- $pfconSecret := printf "%s-pfcon" .Release.Name }}
          {{- $pfconEnv := (dict
            "PFCON_USER"     (dict "valueFrom" "secretKeyRef" "name" $pfconSecret "key" "PFCON_USER")
            "PFCON_PASSWORD" (dict "valueFrom" "secretKeyRef" "name" $pfconSecret "key" "PFCON_PASSWORD")
          ) }}
          {{- include "cube.container" (mustMerge (dict "moreEnv" $pfconEnv) .) | nindent 10 }}
            - name: PFCON_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-pfcon
                  key: PFCON_USER
            - name: PFCON_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-pfcon
                  key: PFCON_PASSWORD
        {{- end }}

        - name: wait-rabbitmq
          image: {{ include "cube.image" . }}
          command:
          - python
          - -c
          - |
            import os
            import requests
            url = f'http://{os.getenv("host")}:15672/api/aliveness-test/%2F'
            auth = (os.getenv('username'), os.getenv('password'))
            counter = 0
            status = {}
            while status != {'status': 'ok'}:
                print(f'RabbitMQ startup poll # {counter}', flush=True)
                counter += 1
                try:
                    res = requests.get(url, auth=auth)
                except requests.ConnectionError:
                    continue
                if res.status_code != 200:
                    continue
                status = res.json()
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-rabbitmq-svcbind

      containers:
        - name: celery-beat
          command: ["celery", "-A", "core", "beat", "-l", "info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
          {{- include "cube.container" . | nindent 10 }}
          # hard-coded resources because celery beat shouldn't require variable resources
          resources:
            requests:
              memory: 384Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 100m
        - name: server-private
          command:
            - granian
            - --host=0.0.0.0
            - --port={{ include "chris.heart.port" . }}
            - --workers=1
            - --threads=1
            - --blocking-threads=1
            - --threading-mode=workers
            - 'config.asgi:application'
          {{- include "cube.container" . | nindent 10 }}
          ports:
            - name: http
              containerPort: {{ include "chris.heart.port" . }}
          resources:
            requests:
              memory: 384Mi
              cpu: 200m
            limits:
              memory: 1Gi
              cpu: 1000m
          readinessProbe:
            httpGet:
              path: /api/v1/users/
              port: http
            periodSeconds: 5
            timeoutSeconds: 5

      {{- include "cube.pod" . | nindent 6 }}
      {{- /* podAffinityWorkaround is needed only if using pfcon's volume */}}
      {{- if (not (include "cube.useOwnVolume" .)) }}
      {{- include "cube.podAffinityWorkaround" . | nindent 6 }}
      {{- end }}

---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "chris.heart.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "chris.heart.matcher" . | nindent 4 }}
    {{- include "cube.labels" . | nindent 4 }}
  annotations:
    kubernetes.io/description: "Private CUBE API endpoint for coordinating the startup of dependent ChRIS services."
spec:
  type: ClusterIP
  selector:
    {{- include "chris.heart.matcher" . | nindent 4 }}
  ports:
    - name: http
      protocol: TCP
      port: {{ include "chris.heart.port" . }}
      targetPort: {{ include "chris.heart.port" . }}
