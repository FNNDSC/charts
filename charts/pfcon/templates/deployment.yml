apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pfcon.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pfcon.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "pfcon.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pfcon.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pfcon.serviceAccountName" . }}
      {{- $podSecurityContext := merge .Values.podSecurityContext .Values.global.podSecurityContext }}
      {{- with $podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: pfcon
          image: "{{ .Values.pfcon.image.repository }}:{{ .Values.pfcon.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.pfcon.image.pullPolicy }}
          command: ["/entrypoint.sh"]
          args: ["gunicorn", "-b", "0.0.0.0:{{ .Values.service.port }}", "pfcon.wsgi:application"]
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-pfcon
            - secretRef:
                name: {{ .Release.Name }}-pfcon
          env:
            - name: COMPUTE_SERVICE_URL
              value: http://localhost:{{ .Values.pman.containerPort }}/api/v1/
            - name: STOREBASE_MOUNT
              value: /var/local/storeBase
            {{- range $k, $v := .Values.pfcon.extraEnv }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
          volumeMounts:
            - mountPath: /var/local/storeBase
              name: storebase
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
              {{- if .Values.pfcon.hostPort }}
              hostPort: {{ .Values.pfcon.hostPort }}
              {{- end }}
          readinessProbe:
            httpGet:
              path: /api/v1/health/
              port: http
            periodSeconds: 3
          {{- with .Values.pfcon.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.pfcon.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        - name: pman
          image: "{{ .Values.pman.image.repository }}:{{ .Values.pman.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.pman.image.pullPolicy }}
          command: ["gunicorn", "-b", "0.0.0.0:{{ .Values.pman.containerPort }}", "pman.wsgi:application"]
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-pman
            - secretRef:
                name: {{ .Release.Name }}-pman
          ports:
            - name: http
              containerPort: {{ .Values.pman.containerPort }}
              protocol: TCP
              {{- if .Values.pfcon.hostPort }}
              hostPort: {{ .Values.pfcon.hostPort }}
              {{- end }}
          readinessProbe:
            httpGet:
              path: /api/v1/
              port: http
            periodSeconds: 3
          {{- with .Values.pman.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.pman.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: storebase
          persistentVolumeClaim:
            claimName: {{ include "pfcon.storebase" . }}
        {{- if .Values.pman.podman.enabled }}
        - name: podman-socket
          hostPath:
            path: {{ .Values.pman.podman.socket | required ".Values.pman.podman.socket is required" }}
        {{- end }}
